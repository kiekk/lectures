package com.example.inflearn.mock;

import com.example.inflearn.common.domain.exception.ResourceNotFoundException;
import com.example.inflearn.user.domain.User;
import com.example.inflearn.user.domain.UserStatus;
import com.example.inflearn.user.service.port.UserRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeUserRepository implements UserRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<User> data = new ArrayList<>();

    @Override
    public Optional<User> findByIdAndStatus(Long id, UserStatus userStatus) {
        return data.stream().filter(item -> Objects.equals(item.getId(), id)
                        && item.getStatus() == userStatus)
                .findFirst();
    }

    @Override
    public Optional<User> findByEmailAndStatus(String email, UserStatus userStatus) {
        return data.stream().filter(item -> Objects.equals(item.getEmail(), email)
                        && item.getStatus() == userStatus)
                .findFirst();
    }

    @Override
    public User save(final User user) {
        if (Objects.isNull(user.getId())) {
            final User createUser = User.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .email(user.getEmail())
                    .nickname(user.getNickname())
                    .address(user.getAddress())
                    .certificationCode(user.getCertificationCode())
                    .status(user.getStatus())
                    .lastLoginAt(user.getLastLoginAt())
                    .build();
            data.add(createUser);
            return createUser;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), user.getId()));
            data.add(user);
            return user;
        }
    }

    @Override
    public Optional<User> findById(Long id) {
        return data.stream().filter(item -> Objects.equals(item.getId(), id))
                .findFirst();
    }

    @Override
    public User getById(Long id) {
        return data.stream().filter(item -> Objects.equals(item.getId(), id))
                .findFirst()
                .orElseThrow(() -> new ResourceNotFoundException("Users", id));
    }
}
